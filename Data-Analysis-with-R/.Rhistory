return(c(title,as.character(date)))
}
bbcScrapper("http://www.bbc.com/news/business-29569844")
bbcScrapper("http://www.bbc.com/news/business-29610069")
url <- "http://www.strava.com/athlete/training/log"
getURL(url, encoding="UTF-8")
url <- "http://www.theguardian.com/commentisfree/2014/feb/25/how-much-cost-growers-bananas-68p-per-kilo"
gScrapper <- function(url){
SOURCE <- getURL(url, encoding="UTF-8")
PARSED <- htmlParse(SOURCE)
title <- xpathSApply(PARSED, "//h1[@class='story-header']", xmlValue)
date <- (xpathSApply(PARSED, "//meta[@name='OriginalPublicationDate']/@content"))
if (is.null(date)){
date <- (xpathSApply(PARSED, "//span[@class='date']", xmlValue))
}
return(c(title,as.character(date)))
}
gScrapper(url)
gScrapper <- function(url){
SOURCE <- getURL(url, encoding="UTF-8")
PARSED <- htmlParse(SOURCE)
title <- xpathSApply(PARSED, "//h1[@itemprop='name headline']", xmlValue)
date <- (xpathSApply(PARSED, "//meta[@property='article:published_time']/@content"))
#if (is.null(date)){
#  date <- (xpathSApply(PARSED, "//span[@class='date']", xmlValue))
#}
return(c(title,as.character(date)))
}
gScrapper(url)
gScrapper <- function(url){
SOURCE <- getURL(url, encoding="UTF-8")
PARSED <- htmlParse(SOURCE)
title <- xpathSApply(PARSED, "//h1[contains(@itemprop='headline')]", xmlValue)
date <- (xpathSApply(PARSED, "//meta[@property='article:published_time']/@content"))
#if (is.null(date)){
#  date <- (xpathSApply(PARSED, "//span[@class='date']", xmlValue))
#}
return(c(title,as.character(date)))
}
gScrapper(url)
gScrapper <- function(url){
SOURCE <- getURL(url, encoding="UTF-8")
PARSED <- htmlParse(SOURCE)
title <- xpathSApply(PARSED, "//h1[contains(@itemprop,'headline')]", xmlValue)
date <- (xpathSApply(PARSED, "//meta[@property='article:published_time']/@content"))
#if (is.null(date)){
#  date <- (xpathSApply(PARSED, "//span[@class='date']", xmlValue))
#}
return(c(title,as.character(date)))
}
gScrapper(url)
policy.HTML.page <- readLines("http://policy.unt.edu/policy/3-5")
length(policy.HTML.page)
head(policy.HTML.page)
policy.HTML.page[186:202]
id1 <- 3 + which(policy.HTML.page == "                    TOTAL UNIVERSITY        </div>")
id
id1
id2 <- id1 + 5
id2
text.data <- policy.HTML.page[id1:id2]
rm(policy.HTML.page, id1, id2)
text.data
td.1 <- gsub(pattern = "<p>", replacement = "", x = text.data, ignore.case = TRUE, perl = FALSE ,fixed = TRUE, useBytes = FALSE)
td.1
td.2 <- gsub(pattern = "</p>", replacement = "", x = td.1, ignore.case = TRUE, perl = FALSE, fixed = TRUE, useBytes = FALSE)
# retreive the html
text.d <- td.2; rm(td.1, td.2)
library(tm)
txt <- VectorSource(text.d); rm(text.d)
txt
txt.corpus <- Corpus(txt); rm(txt)
inspect(txt.corpus)
txt.corpus[[6]]
txt.corpus[[6]][3]
txt.corpus[[6]][[3]]
length(txt.corpus[[6]])
txt.corpus <- tm_map(txt.corpus, tolower)
txt.corpus <- tm_map(txt.corpus, removePunctuation)
txt.corpus <- tm_map(txt.corpus, removeNumers)
?tm_map
getTransformations()
txt.corpus <- tm_map(txt.corpus, removeNumbers)
txt.corpus <- tm_map(txt.corpus, removeNumbers)
txt.corpus <- tm_map(txt.corpus, removeWords, stopwords("english"))
inspect(txt.corpus)
rm(txt.corpus)
# retreive the html
policy.HTML.page <- readLines("http://policy.unt.edu/policy/3-5")
# identify subset of actual text
id1 <- 3 + which(policy.HTML.page == "                    TOTAL UNIVERSITY        </div>")
id2 <- id1 + 5
text.data <- policy.HTML.page[id1:id2]
# replace p tag
td.1 <- gsub(pattern = "<p>", replacement = "", x = text.data, ignore.case = TRUE, perl = FALSE ,fixed = TRUE, useBytes = FALSE)
td.2 <- gsub(pattern = "</p>", replacement = "", x = td.1, ignore.case = TRUE, perl = FALSE, fixed = TRUE, useBytes = FALSE)
text.d <- td.2; rm(td.1, td.2)
# use tm pacakge to make text a corpus
library(tm)
# 1st step in transforming to corpus
txt <- VectorSource(text.d); rm(text.d)
# 2nd step in transforming to corpus
txt.corpus <- Corpus(txt); rm(txt)
inspect(txt.corpus)
txt.corpus <- tm_map(txt.corpus, tolower)
inspect(txt.corpus)
txt.corpus <- tm_map(txt.corpus, removePunctuation)
inspect(txt.corpus)
txt.corpus <- tm_map(txt.corpus, removeNumbers)
inspect(txt.corpus)
txt.corpus <- tm_map(txt.corpus, removeWords, stopwords("english"))
inspect(txt.corpus)
x <- "I am in a house"
x
install.packages("ngram")
library(ngram)
ng <- ngram(x, n=2)
ng
print(ng, full=TRUE)
babble(ng, 10)
babble(ng, 1)
babble(ng, 2)
babble(ng, 4, seed=10)
babble(ng, 4)
get.ngrams(ng)
get.string(ng)
get.nextwords(ng)
ls()
rm(list=ls())
ls()
data = c(8,9,10,11,12)
data
data.mean()
mean(data)
sd(data)
var(data)
data(diamonds)
getwd()
library(ggplot2)
data(diamonds)
length(diamonds)
names(diamonds)
length(names(diamonds))
str(diamonds)
head(diamonds)
head(diamonds,10)
help(diamonds)
length(diamonds)
nrow(diamonds)
names(diamonds)
qplot(price, data = diamonds)
library(ggthemes)
theme_set(theme_economist())
qplot(price, data = diamonds)
summary(diamonds$price)
std(diamonds$price)
var(diamonds$price)
sqrt(var(diamonds$price))
qplot(log10(price), data = diamonds)
qplot(price, data = diamonds) +
scale_x_log10()
length(diamonds$price < 500)
nrow(diamonds)
length(diamond(which(diamonds$price < 500)))
length(diamonds(which(diamonds$price < 500)))
length(diamonds[which(diamonds$price < 500)])
length(diamonds[which(diamonds$price < 500),])
length(diamonds[which(diamonds$price < 250),])
length(diamonds[which(diamonds$price < 10000),])
diamonds[which(diamonds$price < 10000),]
length(diamonds[which(diamonds$price < 10000),])
nrow(diamonds[which(diamonds$price < 10000),])
nrow(diamonds[which(diamonds$price < 500),])
nrow(diamonds[which(diamonds$price < 250),])
nrow(diamonds[which(diamonds$price >= 15000),])
qplot(price, data = diamonds)
qplot(price, data = diamonds,
color = I('black'), fill = I('#099009'))
binwidth = 50)
qplot(price, data = diamonds, binwidth=50,
color = I('black'), fill = I('#099009'))
qplot(x=price, data=diamonds, binwidth=50,
color = I('black'), fill = I('#099009'))
qplot(x=price, data=diamonds, binwidth=30,
color = I('black'), fill = I('#099009'))
qplot(price, data = diamonds) #+
qplot(x=price, data=diamonds, binwidth=10,
color = I('black'), fill = I('#099009'))
qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009'))
hist <- qplot(price, data = diamonds) #+
hist
histinfo
summary(hist)
decribe(hist)
str(hist)
ggplot_build(hist)
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009'))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(0,5000,100))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(0,5000,100), limits=c(0,5000))
hist
ggplot_build(hist)[data]
ggplot_build(hist)
scale_x_continuous(breaks=c(250,5000,100), limits=c(0,5000))
hist
ggplot_build(hist)
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(250,5000,100), limits=c(250,5000))
hist
scale_x_continuous(breaks=c(250,1000,100), limits=c(250,5000))
hsit
hist
scale_x_continuous(breaks=c(250,1000,100), limits=c(250,1000))
scale_x_continuous(breaks=c(250,1000,10), limits=c(250,1000))
hist
library(ggplot2)
data(diamonds)
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(250,1000,10), limits=c(250,1000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,5000,10), limits=c(500,5000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,10), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,50), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,500), limits=c(500,10000))
hist
ggplot_build(hist)
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,1000), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,1), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,100), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,500), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(50,10000,500), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,10000,50), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,1000,500), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,1000,5000), limits=c(500,10000))
hist
help(qplot)
help(scale_x_continuous)
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(500,5000,10000), limits=c(500,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=100,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=500,
color = I('black'), fill = I('#099009')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=500,
color = I('black'), fill = I('steelblue')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
library(ggthemes)
theme_set(theme_economist())
hist
hist <- qplot(x=price, data=diamonds, binwidth=500,
color = I('black'), fill = I('red')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
hist <- qplot(x=price, data=diamonds, binwidth=500,
main = 'Diamond Price Histogram', color = I('black'), fill = I('red')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000)) +
)
hist <- qplot(x=price, data=diamonds, binwidth=500,
main = 'Diamond Price Histogram', color = I('black'), fill = I('red')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000)) +
hist <- qplot(x=price, data=diamonds, binwidth=500,
main = "Diamond Price Histogram", color = I('black'), fill = I('red')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
hist <- qplot(x=diamonds$price, data=diamonds, binwidth=500,
main = "Diamond Price Histogram", color = I('black'), fill = I('red')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
getwd()
setwd("Udacity/Data-Analysis-with-R/")
ggsave('diamondPriceHistogram.png')
list.files()
hist <- qplot(x=diamonds$price, data=diamonds, binwidth=1,
main = "Diamond Price Histogram", color = I('black'), fill = I('red')) +
scale_x_continuous(breaks=c(0,5000,10000), limits=c(0,10000))
hist
ggplot_build(hist)
mean(diamonds$price)
mode(diamonds$price)
table(diamonds$price)
table(diamonds$price).max
table(diamonds$price).max()
maxtable(diamonds$price))
max(table(diamonds$price))
table(diamonds$price)[132]
max(diamonds$price)
mean(diamonds$price)
median(diamonds$price)
mode(diamonds$price)
temp <- table(diamonds$price)
names(temp)[temp == max(temp)]
qplot(price, data = diamonds) +
facet_wrap(~cut)
table(diamonds$price, diamonds$cut)
diamonds[,diamonds$price == max(diamonds$price)]
diamonds[:diamonds$price == max(diamonds$price)]
diamonds[:,diamonds$price == max(diamonds$price)]
diamonds[,:diamonds$price == max(diamonds$price)]
max(diamonds$price)
diamonds[,diamonds$price == 18823]
diamonds[which(diamonds$price == 18823)]
diamonds[which(diamonds$price == 18823),]
diamonds[which(diamonds$price == max(diamonds$price)),]
diamonds[which(diamonds$price == min(diamonds$price)),]
by(diamonds$cut, diamonds$price, summary)
diamonds[which(diamonds$price == max(diamonds$price)),]
by(diamonds$price, diamonds$cut, summary)
diamonds[which(diamonds$price == max(diamonds$price)),]
max(diamonds$price)
by(diamonds$price, diamonds$cut, max)
library(ggplot2)
data(diamonds)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, max)
help(by)
summary(diamonds$price)
summary(diamonds$price, diamonds$cut)
help(facet_wrap)
qplot(price, data = diamonds) +
facet_wrap(~cut, scales='free')
qplot(price, data = diamonds) +
facet_wrap(~cut, scales='free') +
scale_x_log10()
qplot(x=price, y=cut,
data=diamonds,
geom='boxplot')
qplot(x=diamonds$price, y=diamonds$cut,
data=diamonds,
geom='boxplot')
qplot(x=diamonds$price, y=diamonds$cut,
data=diamonds,
geom='boxplot') +
# scale_y_continuous(limit=c(0,1000)) # this removes some data points
# coord_cartesian(ylim=c(0,1000)) # this keeps all data points
scale_y_log10()
qplot(x=diamonds$price, y=diamonds$cut,
data=diamonds)
qplot(x=diamonds$price, y=diamonds$clarity,
data=diamonds)
qplot(x = clarity, y = price, data = diamonds, geom = 'boxplot')
qplot(x = cut, y=price, data = diamonds, geom = 'boxplot')
qplot(x = color, y=price, data = diamonds, geom = 'boxplot')
by(diamonds$price, diamonds$color, summary)
help(diamonds)
IQR(diamonds[which(diamonds$color) == 'D'])
IQR(diamonds[which(diamonds$color == 'D'),])
IQR(diamonds[which(diamonds$color == 'D')],)
IQR(diamonds[which(diamonds$color == 'D'),])
diamonds[which(diamonds$color == 'D'),]
IQR(diamonds[which(diamonds$color == 'D')['price'],])
diamonds[which(diamonds$color == 'D')['price'],]
diamonds[which(diamonds$color == 'D'),]
diamonds[which(diamonds$color == 'D')[,'price'],]
diamonds[which(diamonds$color == 'D'),][,'price']
IQR(diamonds[which(diamonds$color == 'D'),][,'price'])
IQR(diamonds[which(diamonds$color == 'J'),][,'price'])
names(diamonds)
diamonds$pricePerCarat <- NA
diamonds$pricePerCarat <- diamonds$price / diamonds$carat
by(diamonds$pricePerCarat, diamonds$color, summary)
qplot(x = color, y=pricePerCarat, data = diamonds, geom = 'boxplot')
qplot(x=carat, data = diamonds,
geom = 'freqpoly')
qplot(x=carat, data = diamonds,
binwidth='10',geom = 'freqpoly')
qplot(x=carat, y = ..count../sum(..count..),
data=diamonds, binwidth=10,
geom='freqpoly')
qplot(x=carat, data = diamonds,
binwidth='10',geom = 'freqpoly')
qplot(x=carat, data = diamonds,
binwidth=10,geom = 'freqpoly')
qplot(x=carat, data = diamonds,
binwidth=1,geom = 'freqpoly')
qplot(x=carat, data = diamonds,
binwidth=0.1,geom = 'freqpoly')
fplot = qplot(x=carat, data = diamonds,
binwidth=0.1,geom = 'freqpoly')
ggplot_build(fplot)
fplot = qplot(x=carat, data = diamonds,
binwidth=0.1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5), breaks=seq(0.1,0,5))
fplot = qplot(x=carat, data = diamonds,
binwidth=0.1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5), breaks=seq(0,5,0.1))
fplot
fplot = qplot(x=carat, data = subset(!is.na(diamonds$carat)),
binwidth=0.1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5), breaks=seq(0,5,1))
fplot = qplot(x=carat, data = subset(diamonds, !is.na(carat)),
binwidth=0.1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5), breaks=seq(0,5,1))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5), breaks=seq(0,5,1))
fplot
ggplot_build(fplot)
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0.1,5), breaks=seq(0.1,5,1))
fplot
ggplot_build(fplot)
binwidth=10, geom = 'freqpoly') +
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=5, geom = 'freqpoly') +
scale_x_continuous(limit=c(0.1,5), breaks=seq(0.1,5,1))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=5, geom = 'freqpoly') +
scale_x_continuous(limit=c(0.1,5))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=4, geom = 'freqpoly') +
scale_x_continuous(limit=c(0.1,5))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=4, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=3, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=1, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.5, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5))
fplot
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.01, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,5))
fplot
ggplot_build(fplot)
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.01, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,2))
fplot
ggplot_build(fplot)
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.001, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,1.5))
fplot
ggplot_build(fplot)
# Freq plots for carat
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.001, geom = 'freqpoly') +
scale_x_continuous(limit=c(0,0.5))
fplot
ggplot_build(fplot)
fplot = qplot(x=carat, data = subset(diamonds, !is.na(diamonds$carat)),
binwidth=0.001, geom = 'freqpoly') +
scale_x_continuous(limit=c(0.9,1.2))
ggplot_build(fplot)
help(summary)
devtools::install_github('rstudio/EDAWR')
version()
which R
devtools::install_github('rstudio/EDAWR')
