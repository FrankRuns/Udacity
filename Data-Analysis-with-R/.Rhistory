pollution$city[1,2,3]
pollution$city[1,3,5]
pollution
pollution$city
pollution$city[1]
pollution$city[1,2]
pollution$city[1,3]
pollution$city[c(1,3)]
storms
storms$ratio <- storms$pressure/storms$wind
storms
install.packages('tidyr')
library('tidyr')
cases_long <- gather(cases, "year", "n", 2:4)
cases_ling
cases_long
pollution
pollution_spread <- spread(pollution, size, amount)
pollution_spread
pollution_regather <- gather(pollution_spread, "size", "amount", 2:4)
pollution_regather <- gather(pollution_spread, "large", "amount", 2:4)
pollution_regather <- gather(pollution_spread, "large", "amount", 2:3)
pollution_regather
seperate(storms, date, c("year", "month", "day"), sep="-")
separate(storms, date, c("year", "month", "day"), sep="-")
library('dplyr')
install.packages('nycflights13')
library('nycflights13')
select(storms, storm, pressure)
str(select(storms, storm, pressure))
select(storms, storm, pressure)[1]
select(storms, storm, pressure)[1,1]
select(storms, wind:date)
select(storms, contains('ssu'))
library(ggplot2)
library(ggthemes)
theme_set(theme_economist())
data(diamonds)
with(diamonds, cor.test(x=depth, y=price, method='pearson'))
library(energy)
set.seed(1234)
samp <- sample(diamonds, 1000)
nrow(diamonds)
samp <- sample(diamonds, 10)
samp
nrow(samp)
samp <- diamonds[sample(nrow(diamonds), 10),]
samp
samp <- diamonds[sample(nrow(diamonds), 1000),]
samp
dcor.ttest(samp$depth, samp$price)
samp <- diamonds[sample(nrow(diamonds), 5000),]
dcor.ttest(samp$depth, samp$price)
topvals <- nrow(diamonds)*0.01
topvals
library(ggplot2)
library(ggthemes)
theme_set(theme_economist())
data(diamonds)
topvals <- nrow(diamonds)*0.01
head(diamonds)
summary(diamonds$carat)
attach(diamonds)
quantile(price, .99)
quantile(price, .98)
quantile(price, .97)
quantile(price, .90)
quantile(price, .50)
summary(price)
subset(diamonds, price > quantile(price, .99))
test <- quantile(price, .99)
test
subset(diamonds, price > test)
ntest <- subset(diamonds, price > test)
ntest
nrow(ntest)
top_price <- quantile(diamonds$price, .99)
top_carat <- quantile(diamonds$carat, .99)
top_carat
top_price
bottom99 <- subset(diamonds, price < top_price & carat < top_carat)
nrow(bottom99)
ggplot(aes(x=carat, y=price), data=diamonds) + geom_point()
ggplot(aes(x=carat, y=price), data=bottom99) + geom_point()
ggplot(aes(x=carat, y=price), data=diamonds) + geom_point()
ggplot(aes(x=carat, y=price), data=bottom99) + geom_point()
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
head(diamonds)
ggplot(aes(x=volume, y=price), data=diamonds) + geom_point()
count(diamonds$volume == 0)
library(dplyr)
count(diamonds$volume == 0) # count is in dplyr package
?count
library(plyr)
count(diamonds$volume == 0) # count is in plyr package
detach("package:plyr", unload=TRUE) # do this so it doesn't fuck up dplyr package later
data_clean_carat <- subset(diamonds, carat != 0 & carat <= 800)
with(data_clean_carat, cor.test(x=carat, y=price, method='pearson'))
library(ggplot2)
library(ggthemes)
theme_set(theme_economist())
data(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
data_clean_carat <- subset(diamonds, carat != 0 & carat <= 800)
ggplot(aes(x=carat, y=price), data=diamonds) + geom_point(alpha=1/20) + geom_smooth(method='lm')
ggplot(aes(x=volume, y=price), data=diamonds) + geom_point(alpha=1/20) + geom_smooth(method='lm')
data_clean_volume <- subset(diamonds, volume != 0 & volume <= 800)
ggplot(aes(x=volume, y=price), data=data_clean_volume) + geom_point(alpha=1/20) + geom_smooth(method='lm')
library('dply')
library('dply')
library('dplyr')
diamondsByClarity <- diamonds %>% summarize(
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
head(diamondsByClarity)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarize(
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
head(diamondsByClarity)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarize(
mean_price = mean(as.numeric(price)),
median_price = median(as.numeric(price)),
min_price = min(as.numeric(price)),
max_price = max(as.numeric(price)),
n = n())
head(diamondsByClarity)
p1 <- ggplot(aes(x=mean_price), data = diamonds_by_clarity) + geom_bar()
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p1 <- ggplot(aes(x=mean_price), data = diamonds_by_clarity) + geom_bar()
p1
diamonds_by_clarity
p1 <- ggplot(aes(x=mean_price), data = diamonds_mp_by_clarity) + geom_bar()
p1
p1 <- ggplot(aes(factor(mean_price)), data = diamonds_mp_by_clarity) + geom_bar()
diamonds_mp_by_clarity
p1 <- ggplot(aes(factor(clarity)), data = diamonds_mp_by_clarity) + geom_bar()
p1
p1 <- ggplot(aes(x=factor(clarity), y=mean_price), data = diamonds_mp_by_clarity) + geom_bar()
p1
p1 <- ggplot(aes(x=factor(clarity), y=mean_price), data = diamonds_mp_by_clarity) +
geom_bar(stat='identity')
p1
p2 <- ggplot(aes(x=factor(color), y=mean_price), data = diamonds_mp_by_color) +
geom_bar(stat='identity')
p2
library(gridExtra)
grid.arrange(p1,p2)
?diamonds
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
ggplot(aes(x=factor(cut), y=mean_price), data = diamonds_mp_by_cut) +
geom_bar(stat='identity')
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
set.seed(12345)
diamond_samp = diamonds[sample(1:length(diamonds$price), 500), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
library(gridExtra)
plot1 <- qplot(x=price) +
geom_histogram() +
ggtitle('Price')
library(ggplot2)
data(diamonds)
plot1 <- qplot(x=price) +
geom_histogram() +
ggtitle('Price')
plot1
plot1 <- qplot(x=price, data=diamonds) +
geom_histogram() +
ggtitle('Price')
plot1
plot2 <- qplot(x=price, data=diamonds) +
geom_histogram() +
scale_x_log10() +
ggtitle('Price (log10)')
plot2
grid.arrange(plot1, plot2)
plot1 <- qplot(x=price, data=diamonds, binwidth=100) +
geom_histogram() +
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, binwidth=0.01) +
geom_histogram() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
plot1 <- qplot(x=price, data=diamonds, binwidth=10) +
geom_histogram() +
ggtitle('Price')
# So intereting relationship with color and clarity.. but carat weight and volume are the real drivers
grid.arrange(plot1, plot2)
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(limits=c(min(diamonds$price), quantile(diamonds$price, 0.99)))
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
scale_x_log10()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
scale_y_log10()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99)))
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(scales)
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(alpha = 1/4, color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(diamonds, aes(x=carat, y=price)) +
geom_jitter(alpha = 1/4, color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(diamonds, aes(x=carat, y=price)) +
geom_jitter(alpha = 1/2, size=3/4, color="orange") +
stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) +
geom_jitter(alpha = 1/2, size=3/4) +
# stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(diamonds, aes(x=carat, y=price, color=cut)) +
geom_jitter(alpha = 1/2, size=3/4) +
# stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat colored by Cut')
ggplot(diamonds, aes(x=carat, y=price, color=color)) +
geom_jitter(alpha = 1/2, size=3/4) +
# stat_smooth(method="lm") +
scale_x_continuous(trans = cuberoot_trans(), limits=c(min(diamonds$carat), quantile(diamonds$carat, 0.99))) +
scale_y_continuous(trans = log10_trans(), limits=c(min(diamonds$price), quantile(diamonds$price, 0.99))) +
ggtitle('Price (log10) by Cube-Root of Carat colored by Color')
model <- lm(log(price) ~ carat ^ (1/3), data = diamonds)
model <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
summary(model)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
summary(m2)
summary(m1)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library(memisc)
mtable(m1, m2, m3, m4, m5)
library(ggplot2)
data(diamonds)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
mtable(m1, m2, m3, m4, m5)
m5$residuals
plot(m5$residuals)
plot(m1$residuals)
install.packages("MVN")
library(MVN)
result <- mardiaTest(diamonds, qqplot = FALSE)
head(diamonds)
library(dplyr)
temp <- select(diamonds, carat, cut, clarity, color, price)
head(temp)
as.numeric(cut)
mtable(m1, m2, m3, m4, m5)
head(diamonds)
testDiamond = data.frame(carat = 1.00, cut = "Very Good",
color = "I", clarity = "VS1")
testDiamond
modelEstimate = predict(m5, newdata = testDiamond,
interval = "prediction", level = .95)
modelEstimate
exp(modelEstimate)
filter(diamonds, carat = 1.00, cut = "Very Good", color = "I", clarity = "VS1")
filter(diamonds, carat == 1.00 & cut == "Very Good" & color == "I" & clarity == "VS1")
library(dplyr)
library(ggmap)
flMap = get_map(location="Florida",zoom=7)
library(rgdal)
library(ggplot2)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
# install.packages(x)
lapply(x, library, character.only = TRUE)
library(dplyr)
library(ggmap)
flMap = get_map(location="Florida",zoom=7)
library(rgdal)
library(ggplot2)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
"CRSargs" <- function(object) {
if (!is(object, "CRS")) stop("not a CRS object")
if (!is.na(object@projargs)) {
res <- (checkCRSArgs(object@projargs)[[2]])
res <- paste(unique(unlist(strsplit(res, " "))),
collapse=" ")
return(sub("^\\s+", "", res))
} else return(as.character(NA))
}
checkCRSArgs <- function(uprojargs) {
# RSB 2015-05-21
# fix for omission of proj_defs.dat in PROJ.4 4.9.1
if (!get("has_proj_def.dat", envir=.RGDAL_CACHE)) {
message("NOTE: rgdal::checkCRSArgs: no proj_defs.dat in PROJ.4 shared files")
uprojargs <- proj_def_bug_fix(uprojargs)
}
res <- .Call("checkCRSArgs", uprojargs, PACKAGE="rgdal")
res[[2]] <- sub("^\\s+", "", res[[2]])
# fix for pj_get_def() +no_uoff/+no_off bug
no_uoff <- length(grep("+no_uoff", uprojargs, fixed=TRUE) > 0)
no_off <- length(grep("+no_off", uprojargs, fixed=TRUE) > 0)
if (no_uoff) {
if( length(grep("+no_uoff", res[[2]], fixed=TRUE)) == 0)
res[[2]] <- sub("+no_defs", "+no_uoff +no_defs", res[[2]], fixed=TRUE)
}
if (no_off) {
if (length(grep("+no_off", res[[2]], fixed=TRUE)) == 0)
res[[2]] <- sub("+no_defs", "+no_off +no_defs", res[[2]], fixed=TRUE)
}
res
}
proj_def_bug_fix <- function(uprojargs) {
if (length(grep("no_defs", uprojargs)) == 0L &&
# corrected 20150904
length(grep("init", uprojargs)) == 0L) {
if (length(grep("ellps", uprojargs)) == 0L &&
# corrected 20150905
length(grep("datum", uprojargs)) == 0L) {
tags <- sapply(strsplit(strsplit("+proj=longlat +no_defs",
"\\+")[[1]], "="), "[", 1)
# based on proj/src/pj_init.c lines 191-197
if (!any(c("datum", "ellps", "a", "b", "rf", "f") %in% tags)) {
uprojargs <- paste(uprojargs, "+ellps=WGS84", sep=" ")
}
}
}
uprojargs
}
checkCRSArgs()
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
proj_def_bug_fix()
.valid.CRSobj <- function(object) {
if (exists("is.R") && is.function(is.R) && is.R()) {
projargNA <- is.na(object@projargs)
} else {
projargNA <- is.na(as.numeric(object@projargs))
}
if (!projargNA) {
res <- .Call("checkCRSArgs", object@projargs,
PACKAGE="rgdal")
} else res <- list(TRUE, as.character(NA))
if (!res[[1]]) {
return(res[[2]])
} else {
return(res[[1]])
}
}
setValidity("CRS", .valid.CRSobj)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
"CRSargs" <- function(object) {
if (!is(object, "CRS")) stop("not a CRS object")
if (!is.na(object@projargs)) {
res <- (checkCRSArgs(object@projargs)[[2]])
res <- paste(unique(unlist(strsplit(res, " "))),
collapse=" ")
return(sub("^\\s+", "", res))
} else return(as.character(NA))
}
"CRSargs"()
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
# install.packages(x)
lapply(x, library, character.only = TRUE)
library(dplyr)
library(ggmap)
flMap = get_map(location="Florida",zoom=7)
library(rgdal)
library(ggplot2)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
library(dplyr)
library(ggmap)
flMap = get_map(location="Florida",zoom=7)
library(rgdal)
library(ggplot2)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
library(dplyr)
library(ggmap)
flMap = get_map(location="Florida",zoom=7)
library(rgdal)
library(ggplot2)
flo <- readOGR(dsn = "/Users/frankCorrigan/Downloads/SelfExtract-1/statecounties", layer = "STATECOUNTIES") %>% spTransform(CRS("+proj=longlat +datum=WGS84"))
library(ggplot2); library(rgdal); library(ggmap); library(dplyr); library(RColorBrewer)
setwd("/Users/frankCorrigan/Desktop")
area <- readOGR(dsn = "tl_2012_12_cousub", layer = "tl_2012_12_cousub")
names <- levels(area@data$NAME)
area <- area[area$NAME %in% names[-c(81, 86, 96)],]
area.points <- fortify(area, region="NAME")
setwd("/Users/frankCorrigan/Downloads")
library(dplyr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
data <- read.csv("FEC_FL2012_Data.csv", row.names = NULL)
correct_names <- names(data)[2:length(names(data))]
data <- select(data, -election_tp)
names(data) <- correct_names
data$date <- as.Date(data$contb_receipt_dt, format = "%d-%b-%y")
nom_date <- as.Date("28-AUG-12", format = "%d-%b-%y")
elec_date <- as.Date("06-NOV-12", format = "%d-%b-%y")
data$days_from_elec <- as.integer(elec_date - data$date)
data <- subset(data, cand_nm != "Stein, Jill" & cand_nm != "McCotter, Thaddeus G")
data$party <- ifelse(data$cand_nm == "Obama, Barack", c("democrat"), c("republican"))
data$party[data$cand_nm %in% c("Johnson, Gary Earl", "Roemer, Charles E. 'Buddy' III")] <- "libertarian/other"
library(zipcode) # https://cran.r-project.org/web/packages/zipcode/
data$zip <- clean.zipcodes(data$contbr_zip)
data$zip <- substr(data$zip, 1, 5)
data <- subset(data, zip >= 30000 & zip < 40000)
data(zipcode)
data <- left_join(data, zipcode, by="zip")
data <- filter(data, state == "FL")
data$retired <- ifelse(data$contbr_occupation == "RETIRED", "YES", "NO")
data <- subset(data, contb_receipt_amt < 25000 & contb_receipt_amt > -25000)
data <- subset(data, contb_receipt_amt > 0)
data$over200 <- ifelse(data$contb_receipt_amt > 200, "Large", "Small")
for_real <- c("Cain, Herman", "Gingrich, Newt", "Obama, Barack", "Paul, Ron", "Romney, Mitt", "Santorum, Rick")
names(data)
setwd("/Users/frankCorrigan/Udacity/Data-Analysis-with-R")
counties <- read.csv("florida_counties.csv")
counties$zip <- as.character(counties$zip)
don_data <- left_join(data, counties, by="zip")
don_data <- select(don_data, party, contb_receipt_amt, county)
head(don_data)
unique(don_data$county)
unique(area.points$id)
head(data)
unique(data$city)
unique(data$city) %in% unique(area.points$id)
sum(unique(data$city) %in% unique(area.points$id))
